/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdPlanets200Ok;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdPlanetsPlanetIdNotFound;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdPlanetsPlanetIdOk;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdCustomsOffices200Ok;
import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.universe.GetUniverseSchematicsSchematicIdNotFound;
import com.github.tddts.eve.model.universe.GetUniverseSchematicsSchematicIdOk;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@Api(value = "PlanetaryInteraction")
public interface PlanetaryInteractionReactiveApi {

  @ApiOperation(value = "Get colonies", nickname = "getCharactersCharacterIdPlanets", notes = "Returns a list of all planetary colonies owned by a character.  --- Alternate route: `/dev/characters/{character_id}/planets/`  Alternate route: `/legacy/characters/{character_id}/planets/`  Alternate route: `/v1/characters/{character_id}/planets/`  --- This route is cached for up to 600 seconds", response = GetCharactersCharacterIdPlanets200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-planets.manage_planets.v1", description = "EVE SSO scope esi-planets.manage_planets.v1")
      })
  }, tags = {"Planetary Interaction",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of colonies", response = GetCharactersCharacterIdPlanets200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/planets/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdPlanets200Ok> getCharactersCharacterIdPlanets(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get colony layout", nickname = "getCharactersCharacterIdPlanetsPlanetId", notes = "Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.  --- Alternate route: `/dev/characters/{character_id}/planets/{planet_id}/`  Alternate route: `/v3/characters/{character_id}/planets/{planet_id}/`  --- This route is cached for up to 600 seconds", response = GetCharactersCharacterIdPlanetsPlanetIdOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-planets.manage_planets.v1", description = "EVE SSO scope esi-planets.manage_planets.v1")
      })
  }, tags = {"Planetary Interaction",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Colony layout", response = GetCharactersCharacterIdPlanetsPlanetIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "Colony not found", response = GetCharactersCharacterIdPlanetsPlanetIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/planets/{planet_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetCharactersCharacterIdPlanetsPlanetIdOk> getCharactersCharacterIdPlanetsPlanetId(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "Planet id of the target planet", required = true) @PathVariable("planet_id") Integer planetId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "List corporation customs offices", nickname = "getCorporationsCorporationIdCustomsOffices", notes = "List customs offices owned by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/customs_offices/`  Alternate route: `/legacy/corporations/{corporation_id}/customs_offices/`  Alternate route: `/v1/corporations/{corporation_id}/customs_offices/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director ", response = GetCorporationsCorporationIdCustomsOffices200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-planets.read_customs_offices.v1", description = "EVE SSO scope esi-planets.read_customs_offices.v1")
      })
  }, tags = {"Planetary Interaction",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of customs offices and their settings", response = GetCorporationsCorporationIdCustomsOffices200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/customs_offices/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdCustomsOffices200Ok> getCorporationsCorporationIdCustomsOffices(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get schematic information", nickname = "getUniverseSchematicsSchematicId", notes = "Get information on a planetary factory schematic  --- Alternate route: `/dev/universe/schematics/{schematic_id}/`  Alternate route: `/legacy/universe/schematics/{schematic_id}/`  Alternate route: `/v1/universe/schematics/{schematic_id}/`  --- This route is cached for up to 3600 seconds", response = GetUniverseSchematicsSchematicIdOk.class, tags = {"Planetary Interaction",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Public data about a schematic", response = GetUniverseSchematicsSchematicIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Schematic not found", response = GetUniverseSchematicsSchematicIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/schematics/{schematic_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseSchematicsSchematicIdOk> getUniverseSchematicsSchematicId(
      @ApiParam(value = "A PI schematic ID", required = true) @PathVariable("schematic_id") Integer schematicId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);

}
