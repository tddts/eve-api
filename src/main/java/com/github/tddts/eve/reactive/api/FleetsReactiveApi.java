/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdFleetNotFound;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdFleetOk;
import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.fleets.*;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@Api(value = "Fleets")
public interface FleetsReactiveApi {

  @ApiOperation(value = "Kick fleet member", nickname = "deleteFleetsFleetIdMembersMemberId", notes = "Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Fleet member kicked"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = DeleteFleetsFleetIdMembersMemberIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/members/{member_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.DELETE)
  Void deleteFleetsFleetIdMembersMemberId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The character ID of a member in this fleet", required = true) @PathVariable("member_id") Integer memberId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Delete fleet squad", nickname = "deleteFleetsFleetIdSquadsSquadId", notes = "Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Squad deleted"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = DeleteFleetsFleetIdSquadsSquadIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/squads/{squad_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.DELETE)
  Void deleteFleetsFleetIdSquadsSquadId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The squad to delete", required = true) @PathVariable("squad_id") Long squadId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Delete fleet wing", nickname = "deleteFleetsFleetIdWingsWingId", notes = "Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Wing deleted"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = DeleteFleetsFleetIdWingsWingIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/wings/{wing_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.DELETE)
  Void deleteFleetsFleetIdWingsWingId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The wing to delete", required = true) @PathVariable("wing_id") Long wingId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get character fleet info", nickname = "getCharactersCharacterIdFleet", notes = "Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)", response = GetCharactersCharacterIdFleetOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.read_fleet.v1", description = "EVE SSO scope esi-fleets.read_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Details about the character's fleet", response = GetCharactersCharacterIdFleetOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The character is not in a fleet", response = GetCharactersCharacterIdFleetNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/fleet/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetCharactersCharacterIdFleetOk> getCharactersCharacterIdFleet(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get fleet information", nickname = "getFleetsFleetId", notes = "Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds", response = GetFleetsFleetIdOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.read_fleet.v1", description = "EVE SSO scope esi-fleets.read_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Details about a fleet", response = GetFleetsFleetIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = GetFleetsFleetIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetFleetsFleetIdOk> getFleetsFleetId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get fleet members", nickname = "getFleetsFleetIdMembers", notes = "Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds", response = GetFleetsFleetIdMembers200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.read_fleet.v1", description = "EVE SSO scope esi-fleets.read_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of fleet members", response = GetFleetsFleetIdMembers200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = GetFleetsFleetIdMembersNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/members/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetFleetsFleetIdMembers200Ok> getFleetsFleetIdMembers(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get fleet wings", nickname = "getFleetsFleetIdWings", notes = "Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds", response = GetFleetsFleetIdWings200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.read_fleet.v1", description = "EVE SSO scope esi-fleets.read_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of fleet wings", response = GetFleetsFleetIdWings200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = GetFleetsFleetIdWingsNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/wings/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetFleetsFleetIdWings200Ok> getFleetsFleetIdWings(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Create fleet invitation", nickname = "postFleetsFleetIdMembers", notes = "Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Fleet invitation sent"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PostFleetsFleetIdMembersNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 422, message = "Errors in invitation", response = PostFleetsFleetIdMembersUnprocessableEntity.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/members/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.POST)
  Void postFleetsFleetIdMembers(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "Details of the invitation", required = true) @Valid @RequestBody PostFleetsFleetIdMembersInvitation invitation,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Create fleet wing", nickname = "postFleetsFleetIdWings", notes = "Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` ", response = PostFleetsFleetIdWingsCreated.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 201, message = "Wing created", response = PostFleetsFleetIdWingsCreated.class),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PostFleetsFleetIdWingsNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/wings/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Mono<PostFleetsFleetIdWingsCreated> postFleetsFleetIdWings(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Create fleet squad", nickname = "postFleetsFleetIdWingsWingIdSquads", notes = "Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` ", response = PostFleetsFleetIdWingsWingIdSquadsCreated.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 201, message = "Squad created", response = PostFleetsFleetIdWingsWingIdSquadsCreated.class),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PostFleetsFleetIdWingsWingIdSquadsNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/wings/{wing_id}/squads/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Mono<PostFleetsFleetIdWingsWingIdSquadsCreated> postFleetsFleetIdWingsWingIdSquads(
      @ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The wing_id to create squad in", required = true) @PathVariable("wing_id") Long wingId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Update fleet", nickname = "putFleetsFleetId", notes = "Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Fleet updated"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PutFleetsFleetIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.PUT)
  Void putFleetsFleetId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "What to update for this fleet", required = true) @Valid @RequestBody PutFleetsFleetIdNewSettings newSettings,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Move fleet member", nickname = "putFleetsFleetIdMembersMemberId", notes = "Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Fleet invitation sent"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PutFleetsFleetIdMembersMemberIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 422, message = "Errors in invitation", response = PutFleetsFleetIdMembersMemberIdUnprocessableEntity.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/members/{member_id}/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.PUT)
  Void putFleetsFleetIdMembersMemberId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "The character ID of a member in this fleet", required = true) @PathVariable("member_id") Integer memberId,
      @ApiParam(value = "Details of the invitation", required = true) @Valid @RequestBody PutFleetsFleetIdMembersMemberIdMovement movement,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Rename fleet squad", nickname = "putFleetsFleetIdSquadsSquadId", notes = "Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Squad renamed"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PutFleetsFleetIdSquadsSquadIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/squads/{squad_id}/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.PUT)
  Void putFleetsFleetIdSquadsSquadId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "New name of the squad", required = true) @Valid @RequestBody PutFleetsFleetIdSquadsSquadIdNaming naming,
      @ApiParam(value = "The squad to rename", required = true) @PathVariable("squad_id") Long squadId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Rename fleet wing", nickname = "putFleetsFleetIdWingsWingId", notes = "Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-fleets.write_fleet.v1", description = "EVE SSO scope esi-fleets.write_fleet.v1")
      })
  }, tags = {"Fleets",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Wing renamed"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "The fleet does not exist or you don't have access to it", response = PutFleetsFleetIdWingsWingIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fleets/{fleet_id}/wings/{wing_id}/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.PUT)
  Void putFleetsFleetIdWingsWingId(@ApiParam(value = "ID for a fleet", required = true) @PathVariable("fleet_id") Long fleetId,
      @ApiParam(value = "New name of the wing", required = true) @Valid @RequestBody PutFleetsFleetIdWingsWingIdNaming naming,
      @ApiParam(value = "The wing to rename", required = true) @PathVariable("wing_id") Long wingId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);

}
