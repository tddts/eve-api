/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.ui.PostUiOpenwindowNewmailNewMail;
import com.github.tddts.eve.model.ui.PostUiOpenwindowNewmailUnprocessableEntity;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Api(value = "UserInterface")
public interface UserInterfaceReactiveApi {

  @ApiOperation(value = "Set Autopilot Waypoint", nickname = "postUiAutopilotWaypoint", notes = "Set a solar system as autopilot waypoint  --- Alternate route: `/dev/ui/autopilot/waypoint/`  Alternate route: `/legacy/ui/autopilot/waypoint/`  Alternate route: `/v2/ui/autopilot/waypoint/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-ui.write_waypoint.v1", description = "EVE SSO scope esi-ui.write_waypoint.v1")
      })
  }, tags = {"User Interface",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Open window request received"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/ui/autopilot/waypoint/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Void postUiAutopilotWaypoint(
      @NotNull @ApiParam(value = "Whether this solar system should be added to the beginning of all waypoints", required = true, defaultValue = "false") @Valid @RequestParam(value = "add_to_beginning", required = true, defaultValue = "false") Boolean addToBeginning,
      @NotNull @ApiParam(value = "Whether clean other waypoints beforing adding this one", required = true, defaultValue = "false") @Valid @RequestParam(value = "clear_other_waypoints", required = true, defaultValue = "false") Boolean clearOtherWaypoints,
      @NotNull @ApiParam(value = "The destination to travel to, can be solar system, station or structure's id", required = true) @Valid @RequestParam(value = "destination_id", required = true) Long destinationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Open Contract Window", nickname = "postUiOpenwindowContract", notes = "Open the contract window inside the client  --- Alternate route: `/dev/ui/openwindow/contract/`  Alternate route: `/legacy/ui/openwindow/contract/`  Alternate route: `/v1/ui/openwindow/contract/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-ui.open_window.v1", description = "EVE SSO scope esi-ui.open_window.v1")
      })
  }, tags = {"User Interface",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Open window request received"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/ui/openwindow/contract/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Void postUiOpenwindowContract(
      @NotNull @ApiParam(value = "The contract to open", required = true) @Valid @RequestParam(value = "contract_id", required = true) Integer contractId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Open Information Window", nickname = "postUiOpenwindowInformation", notes = "Open the information window for a character, corporation or alliance inside the client  --- Alternate route: `/dev/ui/openwindow/information/`  Alternate route: `/legacy/ui/openwindow/information/`  Alternate route: `/v1/ui/openwindow/information/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-ui.open_window.v1", description = "EVE SSO scope esi-ui.open_window.v1")
      })
  }, tags = {"User Interface",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Open window request received"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/ui/openwindow/information/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Void postUiOpenwindowInformation(
      @NotNull @ApiParam(value = "The target to open", required = true) @Valid @RequestParam(value = "target_id", required = true) Integer targetId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Open Market Details", nickname = "postUiOpenwindowMarketdetails", notes = "Open the market details window for a specific typeID inside the client  --- Alternate route: `/dev/ui/openwindow/marketdetails/`  Alternate route: `/legacy/ui/openwindow/marketdetails/`  Alternate route: `/v1/ui/openwindow/marketdetails/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-ui.open_window.v1", description = "EVE SSO scope esi-ui.open_window.v1")
      })
  }, tags = {"User Interface",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Open window request received"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/ui/openwindow/marketdetails/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.POST)
  Void postUiOpenwindowMarketdetails(
      @NotNull @ApiParam(value = "The item type to open in market window", required = true) @Valid @RequestParam(value = "type_id", required = true) Integer typeId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Open New Mail Window", nickname = "postUiOpenwindowNewmail", notes = "Open the New Mail window, according to settings from the request if applicable  --- Alternate route: `/dev/ui/openwindow/newmail/`  Alternate route: `/legacy/ui/openwindow/newmail/`  Alternate route: `/v1/ui/openwindow/newmail/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-ui.open_window.v1", description = "EVE SSO scope esi-ui.open_window.v1")
      })
  }, tags = {"User Interface",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Open window request received"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 422, message = "Invalid request", response = PostUiOpenwindowNewmailUnprocessableEntity.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/ui/openwindow/newmail/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.POST)
  Void postUiOpenwindowNewmail(@ApiParam(value = "The details of mail to create", required = true) @Valid @RequestBody PostUiOpenwindowNewmailNewMail newMail,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);

}
