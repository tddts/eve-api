/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.alliance.GetAlliancesAllianceIdContacts200Ok;
import com.github.tddts.eve.model.alliance.GetAlliancesAllianceIdContactsLabels200Ok;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdContacts200Ok;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdContactsLabels200Ok;
import com.github.tddts.eve.model.characters.PostCharactersCharacterIdContactsError520;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdContacts200Ok;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdContactsLabels200Ok;
import com.github.tddts.eve.model.error.*;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Api(value = "Contacts")
public interface ContactsReactiveApi {

  @ApiOperation(value = "Delete contacts", nickname = "deleteCharactersCharacterIdContacts", notes = "Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.write_contacts.v1", description = "EVE SSO scope esi-characters.write_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Contacts deleted"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/contacts/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.DELETE)
  Void deleteCharactersCharacterIdContacts(@Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @NotNull @Size(min = 1, max = 20) @ApiParam(value = "A list of contacts to delete", required = true) @Valid @RequestParam(value = "contact_ids", required = true) Flux<Integer> contactIds,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get alliance contacts", nickname = "getAlliancesAllianceIdContacts", notes = "Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds", response = GetAlliancesAllianceIdContacts200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-alliances.read_contacts.v1", description = "EVE SSO scope esi-alliances.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of contacts", response = GetAlliancesAllianceIdContacts200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/alliances/{alliance_id}/contacts/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetAlliancesAllianceIdContacts200Ok> getAlliancesAllianceIdContacts(
      @Min(1) @ApiParam(value = "An EVE alliance ID", required = true) @PathVariable("alliance_id") Integer allianceId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get alliance contact labels", nickname = "getAlliancesAllianceIdContactsLabels", notes = "Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds", response = GetAlliancesAllianceIdContactsLabels200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-alliances.read_contacts.v1", description = "EVE SSO scope esi-alliances.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of alliance contact labels", response = GetAlliancesAllianceIdContactsLabels200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/alliances/{alliance_id}/contacts/labels/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetAlliancesAllianceIdContactsLabels200Ok> getAlliancesAllianceIdContactsLabels(
      @Min(1) @ApiParam(value = "An EVE alliance ID", required = true) @PathVariable("alliance_id") Integer allianceId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get contacts", nickname = "getCharactersCharacterIdContacts", notes = "Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds", response = GetCharactersCharacterIdContacts200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.read_contacts.v1", description = "EVE SSO scope esi-characters.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of contacts", response = GetCharactersCharacterIdContacts200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/contacts/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdContacts200Ok> getCharactersCharacterIdContacts(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get contact labels", nickname = "getCharactersCharacterIdContactsLabels", notes = "Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds", response = GetCharactersCharacterIdContactsLabels200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.read_contacts.v1", description = "EVE SSO scope esi-characters.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of contact labels", response = GetCharactersCharacterIdContactsLabels200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/contacts/labels/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdContactsLabels200Ok> getCharactersCharacterIdContactsLabels(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get corporation contacts", nickname = "getCorporationsCorporationIdContacts", notes = "Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds", response = GetCorporationsCorporationIdContacts200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-corporations.read_contacts.v1", description = "EVE SSO scope esi-corporations.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of contacts", response = GetCorporationsCorporationIdContacts200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/contacts/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdContacts200Ok> getCorporationsCorporationIdContacts(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get corporation contact labels", nickname = "getCorporationsCorporationIdContactsLabels", notes = "Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds", response = GetCorporationsCorporationIdContactsLabels200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-corporations.read_contacts.v1", description = "EVE SSO scope esi-corporations.read_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of corporation contact labels", response = GetCorporationsCorporationIdContactsLabels200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/contacts/labels/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdContactsLabels200Ok> getCorporationsCorporationIdContactsLabels(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Add contacts", nickname = "postCharactersCharacterIdContacts", notes = "Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` ", response = Integer.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.write_contacts.v1", description = "EVE SSO scope esi-characters.write_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 201, message = "A list of contact ids that successfully created", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class),
      @ApiResponse(code = 520, message = "Internal error thrown from the EVE server", response = PostCharactersCharacterIdContactsError520.class)})
  @RequestMapping(value = "/characters/{character_id}/contacts/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.POST)
  Flux<Integer> postCharactersCharacterIdContacts(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "A list of contacts", required = true) @Valid @RequestBody Flux<Integer> contactIds,
      @NotNull @DecimalMin("-10") @DecimalMax("10") @ApiParam(value = "Standing for the contact", required = true) @Valid @RequestParam(value = "standing", required = true) Float standing,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @Size(max = 63) @ApiParam(value = "Add custom labels to the new contact") @Valid @RequestParam(value = "label_ids", required = false) Flux<Long> labelIds,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token,
      @ApiParam(value = "Whether the contact should be watched, note this is only effective on characters", defaultValue = "false") @Valid @RequestParam(value = "watched", required = false, defaultValue = "false") Boolean watched);


  @ApiOperation(value = "Edit contacts", nickname = "putCharactersCharacterIdContacts", notes = "Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` ", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.write_contacts.v1", description = "EVE SSO scope esi-characters.write_contacts.v1")
      })
  }, tags = {"Contacts",})
  @ApiResponses(value = {
      @ApiResponse(code = 204, message = "Contacts updated"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/contacts/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.PUT)
  Void putCharactersCharacterIdContacts(@Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "A list of contacts", required = true) @Valid @RequestBody Flux<Integer> contactIds,
      @NotNull @DecimalMin("-10") @DecimalMax("10") @ApiParam(value = "Standing for the contact", required = true) @Valid @RequestParam(value = "standing", required = true) Float standing,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @Size(max = 63) @ApiParam(value = "Add custom labels to the contact") @Valid @RequestParam(value = "label_ids", required = false) Flux<Long> labelIds,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token,
      @ApiParam(value = "Whether the contact should be watched, note this is only effective on characters", defaultValue = "false") @Valid @RequestParam(value = "watched", required = false, defaultValue = "false") Boolean watched);

}
