/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.universe.*;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@Api(value = "Universe")
public interface UniverseReactiveApi {

  @ApiOperation(value = "Get ancestries", nickname = "getUniverseAncestries", notes = "Get all character ancestries  --- Alternate route: `/dev/universe/ancestries/`  Alternate route: `/legacy/universe/ancestries/`  Alternate route: `/v1/universe/ancestries/`  --- This route expires daily at 11:05", response = GetUniverseAncestries200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of ancestries", response = GetUniverseAncestries200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/ancestries/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseAncestries200Ok> getUniverseAncestries(
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get asteroid belt information", nickname = "getUniverseAsteroidBeltsAsteroidBeltId", notes = "Get information on an asteroid belt  --- Alternate route: `/dev/universe/asteroid_belts/{asteroid_belt_id}/`  Alternate route: `/legacy/universe/asteroid_belts/{asteroid_belt_id}/`  Alternate route: `/v1/universe/asteroid_belts/{asteroid_belt_id}/`  --- This route expires daily at 11:05", response = GetUniverseAsteroidBeltsAsteroidBeltIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about an asteroid belt", response = GetUniverseAsteroidBeltsAsteroidBeltIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Asteroid belt not found", response = GetUniverseAsteroidBeltsAsteroidBeltIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/asteroid_belts/{asteroid_belt_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseAsteroidBeltsAsteroidBeltIdOk> getUniverseAsteroidBeltsAsteroidBeltId(
      @ApiParam(value = "asteroid_belt_id integer", required = true) @PathVariable("asteroid_belt_id") Integer asteroidBeltId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get bloodlines", nickname = "getUniverseBloodlines", notes = "Get a list of bloodlines  --- Alternate route: `/dev/universe/bloodlines/`  Alternate route: `/legacy/universe/bloodlines/`  Alternate route: `/v1/universe/bloodlines/`  --- This route expires daily at 11:05", response = GetUniverseBloodlines200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of bloodlines", response = GetUniverseBloodlines200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/bloodlines/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseBloodlines200Ok> getUniverseBloodlines(
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get item categories", nickname = "getUniverseCategories", notes = "Get a list of item categories  --- Alternate route: `/dev/universe/categories/`  Alternate route: `/legacy/universe/categories/`  Alternate route: `/v1/universe/categories/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of item category ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/categories/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseCategories(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get item category information", nickname = "getUniverseCategoriesCategoryId", notes = "Get information of an item category  --- Alternate route: `/dev/universe/categories/{category_id}/`  Alternate route: `/legacy/universe/categories/{category_id}/`  Alternate route: `/v1/universe/categories/{category_id}/`  --- This route expires daily at 11:05", response = GetUniverseCategoriesCategoryIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about an item category", response = GetUniverseCategoriesCategoryIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Category not found", response = GetUniverseCategoriesCategoryIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/categories/{category_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseCategoriesCategoryIdOk> getUniverseCategoriesCategoryId(
      @ApiParam(value = "An Eve item category ID", required = true) @PathVariable("category_id") Integer categoryId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get constellations", nickname = "getUniverseConstellations", notes = "Get a list of constellations  --- Alternate route: `/dev/universe/constellations/`  Alternate route: `/legacy/universe/constellations/`  Alternate route: `/v1/universe/constellations/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of constellation ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/constellations/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseConstellations(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get constellation information", nickname = "getUniverseConstellationsConstellationId", notes = "Get information on a constellation  --- Alternate route: `/dev/universe/constellations/{constellation_id}/`  Alternate route: `/legacy/universe/constellations/{constellation_id}/`  Alternate route: `/v1/universe/constellations/{constellation_id}/`  --- This route expires daily at 11:05", response = GetUniverseConstellationsConstellationIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a constellation", response = GetUniverseConstellationsConstellationIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Constellation not found", response = GetUniverseConstellationsConstellationIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/constellations/{constellation_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseConstellationsConstellationIdOk> getUniverseConstellationsConstellationId(
      @ApiParam(value = "constellation_id integer", required = true) @PathVariable("constellation_id") Integer constellationId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get factions", nickname = "getUniverseFactions", notes = "Get a list of factions  --- Alternate route: `/dev/universe/factions/`  Alternate route: `/v2/universe/factions/`  --- This route expires daily at 11:05", response = GetUniverseFactions200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of factions", response = GetUniverseFactions200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/factions/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseFactions200Ok> getUniverseFactions(
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get graphics", nickname = "getUniverseGraphics", notes = "Get a list of graphics  --- Alternate route: `/dev/universe/graphics/`  Alternate route: `/legacy/universe/graphics/`  Alternate route: `/v1/universe/graphics/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of graphic ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/graphics/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseGraphics(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get graphic information", nickname = "getUniverseGraphicsGraphicId", notes = "Get information on a graphic  --- Alternate route: `/dev/universe/graphics/{graphic_id}/`  Alternate route: `/legacy/universe/graphics/{graphic_id}/`  Alternate route: `/v1/universe/graphics/{graphic_id}/`  --- This route expires daily at 11:05", response = GetUniverseGraphicsGraphicIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a graphic", response = GetUniverseGraphicsGraphicIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Graphic not found", response = GetUniverseGraphicsGraphicIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/graphics/{graphic_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseGraphicsGraphicIdOk> getUniverseGraphicsGraphicId(
      @ApiParam(value = "graphic_id integer", required = true) @PathVariable("graphic_id") Integer graphicId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get item groups", nickname = "getUniverseGroups", notes = "Get a list of item groups  --- Alternate route: `/dev/universe/groups/`  Alternate route: `/legacy/universe/groups/`  Alternate route: `/v1/universe/groups/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of item group ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/groups/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseGroups(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page);


  @ApiOperation(value = "Get item group information", nickname = "getUniverseGroupsGroupId", notes = "Get information on an item group  --- Alternate route: `/dev/universe/groups/{group_id}/`  Alternate route: `/legacy/universe/groups/{group_id}/`  Alternate route: `/v1/universe/groups/{group_id}/`  --- This route expires daily at 11:05", response = GetUniverseGroupsGroupIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about an item group", response = GetUniverseGroupsGroupIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Group not found", response = GetUniverseGroupsGroupIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/groups/{group_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseGroupsGroupIdOk> getUniverseGroupsGroupId(
      @ApiParam(value = "An Eve item group ID", required = true) @PathVariable("group_id") Integer groupId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get moon information", nickname = "getUniverseMoonsMoonId", notes = "Get information on a moon  --- Alternate route: `/dev/universe/moons/{moon_id}/`  Alternate route: `/legacy/universe/moons/{moon_id}/`  Alternate route: `/v1/universe/moons/{moon_id}/`  --- This route expires daily at 11:05", response = GetUniverseMoonsMoonIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a moon", response = GetUniverseMoonsMoonIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Moon not found", response = GetUniverseMoonsMoonIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/moons/{moon_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseMoonsMoonIdOk> getUniverseMoonsMoonId(@ApiParam(value = "moon_id integer", required = true) @PathVariable("moon_id") Integer moonId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get planet information", nickname = "getUniversePlanetsPlanetId", notes = "Get information on a planet  --- Alternate route: `/dev/universe/planets/{planet_id}/`  Alternate route: `/legacy/universe/planets/{planet_id}/`  Alternate route: `/v1/universe/planets/{planet_id}/`  --- This route expires daily at 11:05", response = GetUniversePlanetsPlanetIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a planet", response = GetUniversePlanetsPlanetIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Planet not found", response = GetUniversePlanetsPlanetIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/planets/{planet_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniversePlanetsPlanetIdOk> getUniversePlanetsPlanetId(
      @ApiParam(value = "planet_id integer", required = true) @PathVariable("planet_id") Integer planetId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get character races", nickname = "getUniverseRaces", notes = "Get a list of character races  --- Alternate route: `/dev/universe/races/`  Alternate route: `/legacy/universe/races/`  Alternate route: `/v1/universe/races/`  --- This route expires daily at 11:05", response = GetUniverseRaces200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of character races", response = GetUniverseRaces200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/races/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseRaces200Ok> getUniverseRaces(
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get regions", nickname = "getUniverseRegions", notes = "Get a list of regions  --- Alternate route: `/dev/universe/regions/`  Alternate route: `/legacy/universe/regions/`  Alternate route: `/v1/universe/regions/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of region ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/regions/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseRegions(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get region information", nickname = "getUniverseRegionsRegionId", notes = "Get information on a region  --- Alternate route: `/dev/universe/regions/{region_id}/`  Alternate route: `/legacy/universe/regions/{region_id}/`  Alternate route: `/v1/universe/regions/{region_id}/`  --- This route expires daily at 11:05", response = GetUniverseRegionsRegionIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a region", response = GetUniverseRegionsRegionIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Region not found", response = GetUniverseRegionsRegionIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/regions/{region_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseRegionsRegionIdOk> getUniverseRegionsRegionId(
      @ApiParam(value = "region_id integer", required = true) @PathVariable("region_id") Integer regionId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get stargate information", nickname = "getUniverseStargatesStargateId", notes = "Get information on a stargate  --- Alternate route: `/dev/universe/stargates/{stargate_id}/`  Alternate route: `/legacy/universe/stargates/{stargate_id}/`  Alternate route: `/v1/universe/stargates/{stargate_id}/`  --- This route expires daily at 11:05", response = GetUniverseStargatesStargateIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a stargate", response = GetUniverseStargatesStargateIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Stargate not found", response = GetUniverseStargatesStargateIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/stargates/{stargate_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseStargatesStargateIdOk> getUniverseStargatesStargateId(
      @ApiParam(value = "stargate_id integer", required = true) @PathVariable("stargate_id") Integer stargateId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get star information", nickname = "getUniverseStarsStarId", notes = "Get information on a star  --- Alternate route: `/dev/universe/stars/{star_id}/`  Alternate route: `/legacy/universe/stars/{star_id}/`  Alternate route: `/v1/universe/stars/{star_id}/`  --- This route expires daily at 11:05", response = GetUniverseStarsStarIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a star", response = GetUniverseStarsStarIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/stars/{star_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseStarsStarIdOk> getUniverseStarsStarId(@ApiParam(value = "star_id integer", required = true) @PathVariable("star_id") Integer starId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get station information", nickname = "getUniverseStationsStationId", notes = "Get information on a station  --- Alternate route: `/dev/universe/stations/{station_id}/`  Alternate route: `/v2/universe/stations/{station_id}/`  --- This route expires daily at 11:05", response = GetUniverseStationsStationIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a station", response = GetUniverseStationsStationIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Station not found", response = GetUniverseStationsStationIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/stations/{station_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseStationsStationIdOk> getUniverseStationsStationId(
      @ApiParam(value = "station_id integer", required = true) @PathVariable("station_id") Integer stationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List all public structures", nickname = "getUniverseStructures", notes = "List all public structures  --- Alternate route: `/dev/universe/structures/`  Alternate route: `/legacy/universe/structures/`  Alternate route: `/v1/universe/structures/`  --- This route is cached for up to 3600 seconds", response = Long.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of public structure IDs", response = Long.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/structures/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Long> getUniverseStructures(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Only list public structures that have this service online", allowableValues = "market, manufacturing_basic") @Valid @RequestParam(value = "filter", required = false) String filter,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get structure information", nickname = "getUniverseStructuresStructureId", notes = "Returns information on requested structure if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  --- Alternate route: `/dev/universe/structures/{structure_id}/`  Alternate route: `/v2/universe/structures/{structure_id}/`  --- This route is cached for up to 3600 seconds", response = GetUniverseStructuresStructureIdOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-universe.read_structures.v1", description = "EVE SSO scope esi-universe.read_structures.v1")
      })
  }, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Data about a structure", response = GetUniverseStructuresStructureIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 404, message = "Structure not found", response = GetUniverseStructuresStructureIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/structures/{structure_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseStructuresStructureIdOk> getUniverseStructuresStructureId(
      @ApiParam(value = "An Eve structure ID", required = true) @PathVariable("structure_id") Long structureId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get system jumps", nickname = "getUniverseSystemJumps", notes = "Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: `/dev/universe/system_jumps/`  Alternate route: `/legacy/universe/system_jumps/`  Alternate route: `/v1/universe/system_jumps/`  --- This route is cached for up to 3600 seconds", response = GetUniverseSystemJumps200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of systems and number of jumps", response = GetUniverseSystemJumps200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/system_jumps/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseSystemJumps200Ok> getUniverseSystemJumps(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get system kills", nickname = "getUniverseSystemKills", notes = "Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: `/dev/universe/system_kills/`  Alternate route: `/v2/universe/system_kills/`  --- This route is cached for up to 3600 seconds", response = GetUniverseSystemKills200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of systems and number of ship, pod and NPC kills", response = GetUniverseSystemKills200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/system_kills/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetUniverseSystemKills200Ok> getUniverseSystemKills(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get solar systems", nickname = "getUniverseSystems", notes = "Get a list of solar systems  --- Alternate route: `/dev/universe/systems/`  Alternate route: `/legacy/universe/systems/`  Alternate route: `/v1/universe/systems/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of solar system ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/systems/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseSystems(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get solar system information", nickname = "getUniverseSystemsSystemId", notes = "Get information on a solar system.  --- Alternate route: `/dev/universe/systems/{system_id}/`  Alternate route: `/v4/universe/systems/{system_id}/`  --- This route expires daily at 11:05", response = GetUniverseSystemsSystemIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a solar system", response = GetUniverseSystemsSystemIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Solar system not found", response = GetUniverseSystemsSystemIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/systems/{system_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseSystemsSystemIdOk> getUniverseSystemsSystemId(
      @ApiParam(value = "system_id integer", required = true) @PathVariable("system_id") Integer systemId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get types", nickname = "getUniverseTypes", notes = "Get a list of type ids  --- Alternate route: `/dev/universe/types/`  Alternate route: `/legacy/universe/types/`  Alternate route: `/v1/universe/types/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of type ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/types/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getUniverseTypes(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page);


  @ApiOperation(value = "Get type information", nickname = "getUniverseTypesTypeId", notes = "Get information on a type  --- Alternate route: `/dev/universe/types/{type_id}/`  Alternate route: `/v3/universe/types/{type_id}/`  --- This route expires daily at 11:05", response = GetUniverseTypesTypeIdOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Information about a type", response = GetUniverseTypesTypeIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Type not found", response = GetUniverseTypesTypeIdNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/types/{type_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetUniverseTypesTypeIdOk> getUniverseTypesTypeId(@ApiParam(value = "An Eve item type ID", required = true) @PathVariable("type_id") Integer typeId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Bulk names to IDs", nickname = "postUniverseIds", notes = "Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- Alternate route: `/dev/universe/ids/`  Alternate route: `/legacy/universe/ids/`  Alternate route: `/v1/universe/ids/` ", response = PostUniverseIdsOk.class, tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of id/name associations for a set of names divided by category. Any name passed in that did not have a match will be ommitted", response = PostUniverseIdsOk.class),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/ids/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.POST)
  Mono<PostUniverseIdsOk> postUniverseIds(@ApiParam(value = "The names to resolve", required = true) @Valid @RequestBody Flux<String> names,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get names and categories for a set of IDs", nickname = "postUniverseNames", notes = "Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions  --- Alternate route: `/dev/universe/names/`  Alternate route: `/v3/universe/names/` ", response = PostUniverseNames200Ok.class, responseContainer = "List", tags = {"Universe",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of id/name associations for a set of IDs. All IDs must resolve to a name, or nothing will be returned", response = PostUniverseNames200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "Ensure all IDs are valid before resolving", response = PostUniverseNamesNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/universe/names/",
      produces = "application/json",
      consumes = "application/json",
      method = RequestMethod.POST)
  Flux<PostUniverseNames200Ok> postUniverseNames(@ApiParam(value = "The ids to resolve", required = true) @Valid @RequestBody Flux<Integer> ids,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource);

}
