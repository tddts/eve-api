/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.wars.GetWarsWarIdKillmails200Ok;
import com.github.tddts.eve.model.wars.GetWarsWarIdKillmailsUnprocessableEntity;
import com.github.tddts.eve.model.wars.GetWarsWarIdOk;
import com.github.tddts.eve.model.wars.GetWarsWarIdUnprocessableEntity;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@Api(value = "Wars")
public interface WarsReactiveApi {

  @ApiOperation(value = "List wars", nickname = "getWars", notes = "Return a list of wars  --- Alternate route: `/dev/wars/`  Alternate route: `/legacy/wars/`  Alternate route: `/v1/wars/`  --- This route is cached for up to 3600 seconds", response = Integer.class, responseContainer = "List", tags = {"Wars",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of war IDs, in descending order by war_id", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/wars/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<Integer> getWars(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Only return wars with ID smaller than this") @Valid @RequestParam(value = "max_war_id", required = false) Integer maxWarId);


  @ApiOperation(value = "Get war information", nickname = "getWarsWarId", notes = "Return details about a war  --- Alternate route: `/dev/wars/{war_id}/`  Alternate route: `/legacy/wars/{war_id}/`  Alternate route: `/v1/wars/{war_id}/`  --- This route is cached for up to 3600 seconds", response = GetWarsWarIdOk.class, tags = {"Wars",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Details about a war", response = GetWarsWarIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 422, message = "War not found", response = GetWarsWarIdUnprocessableEntity.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/wars/{war_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<GetWarsWarIdOk> getWarsWarId(@Min(1) @ApiParam(value = "ID for a war", required = true) @PathVariable("war_id") Integer warId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List kills for a war", nickname = "getWarsWarIdKillmails", notes = "Return a list of kills related to a war  --- Alternate route: `/dev/wars/{war_id}/killmails/`  Alternate route: `/legacy/wars/{war_id}/killmails/`  Alternate route: `/v1/wars/{war_id}/killmails/`  --- This route is cached for up to 3600 seconds", response = GetWarsWarIdKillmails200Ok.class, responseContainer = "List", tags = {"Wars",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of killmail IDs and hashes", response = GetWarsWarIdKillmails200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 422, message = "War not found", response = GetWarsWarIdKillmailsUnprocessableEntity.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/wars/{war_id}/killmails/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetWarsWarIdKillmails200Ok> getWarsWarIdKillmails(@Min(1) @ApiParam(value = "A valid war ID", required = true) @PathVariable("war_id") Integer warId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page);

}
