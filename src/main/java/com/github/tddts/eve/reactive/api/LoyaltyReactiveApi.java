/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdLoyaltyPoints200Ok;
import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.loyalty.GetLoyaltyStoresCorporationIdOffers200Ok;
import com.github.tddts.eve.model.loyalty.GetLoyaltyStoresCorporationIdOffersNotFound;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@Api(value = "Loyalty")
public interface LoyaltyReactiveApi {

  @ApiOperation(value = "Get loyalty points", nickname = "getCharactersCharacterIdLoyaltyPoints", notes = "Return a list of loyalty points for all corporations the character has worked for  --- Alternate route: `/dev/characters/{character_id}/loyalty/points/`  Alternate route: `/legacy/characters/{character_id}/loyalty/points/`  Alternate route: `/v1/characters/{character_id}/loyalty/points/`  --- This route is cached for up to 3600 seconds", response = GetCharactersCharacterIdLoyaltyPoints200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.read_loyalty.v1", description = "EVE SSO scope esi-characters.read_loyalty.v1")
      })
  }, tags = {"Loyalty",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of loyalty points", response = GetCharactersCharacterIdLoyaltyPoints200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/loyalty/points/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdLoyaltyPoints200Ok> getCharactersCharacterIdLoyaltyPoints(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "List loyalty store offers", nickname = "getLoyaltyStoresCorporationIdOffers", notes = "Return a list of offers from a specific corporation's loyalty store  --- Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`  Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`  --- This route expires daily at 11:05", response = GetLoyaltyStoresCorporationIdOffers200Ok.class, responseContainer = "List", tags = {"Loyalty",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of offers", response = GetLoyaltyStoresCorporationIdOffers200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 404, message = "No loyalty point store found for the provided corporation", response = GetLoyaltyStoresCorporationIdOffersNotFound.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/loyalty/stores/{corporation_id}/offers/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetLoyaltyStoresCorporationIdOffers200Ok> getLoyaltyStoresCorporationIdOffers(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);

}
