/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdWalletJournal200Ok;
import com.github.tddts.eve.model.characters.GetCharactersCharacterIdWalletTransactions200Ok;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdWallets200Ok;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdWalletsDivisionJournal200Ok;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdWalletsDivisionTransactions200Ok;
import com.github.tddts.eve.model.error.*;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

@Api(value = "Wallet")
public interface WalletReactiveApi {

  @ApiOperation(value = "Get a character's wallet balance", nickname = "getCharactersCharacterIdWallet", notes = "Returns a character's wallet balance  --- Alternate route: `/dev/characters/{character_id}/wallet/`  Alternate route: `/legacy/characters/{character_id}/wallet/`  Alternate route: `/v1/characters/{character_id}/wallet/`  --- This route is cached for up to 120 seconds", response = Double.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_character_wallet.v1", description = "EVE SSO scope esi-wallet.read_character_wallet.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Wallet balance", response = Double.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/wallet/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Mono<Double> getCharactersCharacterIdWallet(@Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get character wallet journal", nickname = "getCharactersCharacterIdWalletJournal", notes = "Retrieve the given character's wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/v6/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds", response = GetCharactersCharacterIdWalletJournal200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_character_wallet.v1", description = "EVE SSO scope esi-wallet.read_character_wallet.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Journal entries", response = GetCharactersCharacterIdWalletJournal200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/wallet/journal/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdWalletJournal200Ok> getCharactersCharacterIdWalletJournal(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get wallet transactions", nickname = "getCharactersCharacterIdWalletTransactions", notes = "Get wallet transactions of a character  --- Alternate route: `/dev/characters/{character_id}/wallet/transactions/`  Alternate route: `/legacy/characters/{character_id}/wallet/transactions/`  Alternate route: `/v1/characters/{character_id}/wallet/transactions/`  --- This route is cached for up to 3600 seconds", response =
      GetCharactersCharacterIdWalletTransactions200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_character_wallet.v1", description = "EVE SSO scope esi-wallet.read_character_wallet.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Wallet transactions", response = GetCharactersCharacterIdWalletTransactions200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/wallet/transactions/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCharactersCharacterIdWalletTransactions200Ok> getCharactersCharacterIdWalletTransactions(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Only show transactions happened before the one referenced by this id") @Valid @RequestParam(value = "from_id", required = false) Long fromId,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Returns a corporation's wallet balance", nickname = "getCorporationsCorporationIdWallets", notes = "Get a corporation's wallets  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant ", response = GetCorporationsCorporationIdWallets200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_corporation_wallets.v1", description = "EVE SSO scope esi-wallet.read_corporation_wallets.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of corporation wallets", response = GetCorporationsCorporationIdWallets200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/wallets/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdWallets200Ok> getCorporationsCorporationIdWallets(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get corporation wallet journal", nickname = "getCorporationsCorporationIdWalletsDivisionJournal", notes = "Retrieve the given corporation's wallet journal for the given division going 30 days back  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/journal/`  Alternate route: `/v4/corporations/{corporation_id}/wallets/{division}/journal/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant ", response = GetCorporationsCorporationIdWalletsDivisionJournal200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_corporation_wallets.v1", description = "EVE SSO scope esi-wallet.read_corporation_wallets.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Journal entries", response = GetCorporationsCorporationIdWalletsDivisionJournal200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/wallets/{division}/journal/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdWalletsDivisionJournal200Ok> getCorporationsCorporationIdWalletsDivisionJournal(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @Min(1) @Max(7) @ApiParam(value = "Wallet key of the division to fetch journals from", required = true) @PathVariable("division") Integer division,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @Min(1) @ApiParam(value = "Which page of results to return", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get corporation wallet transactions", nickname = "getCorporationsCorporationIdWalletsDivisionTransactions", notes = "Get wallet transactions of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/legacy/corporations/{corporation_id}/wallets/{division}/transactions/`  Alternate route: `/v1/corporations/{corporation_id}/wallets/{division}/transactions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant ", response = GetCorporationsCorporationIdWalletsDivisionTransactions200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-wallet.read_corporation_wallets.v1", description = "EVE SSO scope esi-wallet.read_corporation_wallets.v1")
      })
  }, tags = {"Wallet",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Wallet transactions", response = GetCorporationsCorporationIdWalletsDivisionTransactions200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/wallets/{division}/transactions/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok> getCorporationsCorporationIdWalletsDivisionTransactions(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @Min(1) @Max(7) @ApiParam(value = "Wallet key of the division to fetch journals from", required = true) @PathVariable("division") Integer division,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "Only show journal entries happened before the transaction referenced by this id") @Valid @RequestParam(value = "from_id", required = false) Long fromId,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);

}
