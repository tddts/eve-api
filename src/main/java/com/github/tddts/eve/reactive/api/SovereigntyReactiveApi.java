/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.reactive.api;

import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.sovereignty.GetSovereigntyCampaigns200Ok;
import com.github.tddts.eve.model.sovereignty.GetSovereigntyMap200Ok;
import com.github.tddts.eve.model.sovereignty.GetSovereigntyStructures200Ok;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import reactor.core.publisher.Flux;

import javax.validation.Valid;

@Api(value = "Sovereignty")
public interface SovereigntyReactiveApi {

  @ApiOperation(value = "List sovereignty campaigns", nickname = "getSovereigntyCampaigns", notes = "Shows sovereignty data for campaigns.  --- Alternate route: `/dev/sovereignty/campaigns/`  Alternate route: `/legacy/sovereignty/campaigns/`  Alternate route: `/v1/sovereignty/campaigns/`  --- This route is cached for up to 5 seconds", response = GetSovereigntyCampaigns200Ok.class, responseContainer = "List", tags = {"Sovereignty",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of sovereignty campaigns", response = GetSovereigntyCampaigns200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/sovereignty/campaigns/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetSovereigntyCampaigns200Ok> getSovereigntyCampaigns(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List sovereignty of systems", nickname = "getSovereigntyMap", notes = "Shows sovereignty information for solar systems  --- Alternate route: `/dev/sovereignty/map/`  Alternate route: `/legacy/sovereignty/map/`  Alternate route: `/v1/sovereignty/map/`  --- This route is cached for up to 3600 seconds", response = GetSovereigntyMap200Ok.class, responseContainer = "List", tags = {"Sovereignty",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of sovereignty information for solar systems in New Eden", response = GetSovereigntyMap200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/sovereignty/map/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetSovereigntyMap200Ok> getSovereigntyMap(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List sovereignty structures", nickname = "getSovereigntyStructures", notes = "Shows sovereignty data for structures.  --- Alternate route: `/dev/sovereignty/structures/`  Alternate route: `/legacy/sovereignty/structures/`  Alternate route: `/v1/sovereignty/structures/`  --- This route is cached for up to 120 seconds", response = GetSovereigntyStructures200Ok.class, responseContainer = "List", tags = {"Sovereignty",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of sovereignty structures", response = GetSovereigntyStructures200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/sovereignty/structures/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  Flux<GetSovereigntyStructures200Ok> getSovereigntyStructures(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);

}
