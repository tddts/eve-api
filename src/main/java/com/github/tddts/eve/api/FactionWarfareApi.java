/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdFwStatsOk;
import com.github.tddts.eve.model.corporations.GetCorporationsCorporationIdFwStatsOk;
import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.wars.*;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

@Api(value = "FactionWarfare")
public interface FactionWarfareApi {

  @ApiOperation(value = "Overview of a character involved in faction warfare", nickname = "getCharactersCharacterIdFwStats", notes = "Statistical overview of a character involved in faction warfare  --- Alternate route: `/legacy/characters/{character_id}/fw/stats/`  Alternate route: `/v1/characters/{character_id}/fw/stats/`  --- This route expires daily at 11:05", response = GetCharactersCharacterIdFwStatsOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.read_fw_stats.v1", description = "EVE SSO scope esi-characters.read_fw_stats.v1")
      })
  }, tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Faction warfare statistics for a given character", response = GetCharactersCharacterIdFwStatsOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/fw/stats/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetCharactersCharacterIdFwStatsOk getCharactersCharacterIdFwStats(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Overview of a corporation involved in faction warfare", nickname = "getCorporationsCorporationIdFwStats", notes = "Statistics about a corporation involved in faction warfare  --- Alternate route: `/legacy/corporations/{corporation_id}/fw/stats/`  Alternate route: `/v1/corporations/{corporation_id}/fw/stats/`  --- This route expires daily at 11:05  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/fw/stats/)", response = GetCorporationsCorporationIdFwStatsOk.class, authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-corporations.read_fw_stats.v1", description = "EVE SSO scope esi-corporations.read_fw_stats.v1")
      })
  }, tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Faction warfare statistics for a given corporation", response = GetCorporationsCorporationIdFwStatsOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/corporations/{corporation_id}/fw/stats/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetCorporationsCorporationIdFwStatsOk getCorporationsCorporationIdFwStats(
      @Min(1) @ApiParam(value = "An EVE corporation ID", required = true) @PathVariable("corporation_id") Integer corporationId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "List of the top factions in faction warfare", nickname = "getFwLeaderboards", notes = "Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/legacy/fw/leaderboards/`  Alternate route: `/v1/fw/leaderboards/`  --- This route expires daily at 11:05", response = GetFwLeaderboardsOk.class, tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Corporation leaderboard of kills and victory points within faction warfare", response = GetFwLeaderboardsOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/leaderboards/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetFwLeaderboardsOk getFwLeaderboards(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List of the top pilots in faction warfare", nickname = "getFwLeaderboardsCharacters", notes = "Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/legacy/fw/leaderboards/characters/`  Alternate route: `/v1/fw/leaderboards/characters/`  --- This route expires daily at 11:05", response = GetFwLeaderboardsCharactersOk.class, tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Character leaderboard of kills and victory points within faction warfare", response = GetFwLeaderboardsCharactersOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/leaderboards/characters/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetFwLeaderboardsCharactersOk getFwLeaderboardsCharacters(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "List of the top corporations in faction warfare", nickname = "getFwLeaderboardsCorporations", notes = "Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/legacy/fw/leaderboards/corporations/`  Alternate route: `/v1/fw/leaderboards/corporations/`  --- This route expires daily at 11:05", response = GetFwLeaderboardsCorporationsOk.class, tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Corporation leaderboard of kills and victory points within faction warfare", response = GetFwLeaderboardsCorporationsOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/leaderboards/corporations/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetFwLeaderboardsCorporationsOk getFwLeaderboardsCorporations(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "An overview of statistics about factions involved in faction warfare", nickname = "getFwStats", notes = "Statistical overviews of factions involved in faction warfare  --- Alternate route: `/legacy/fw/stats/`  Alternate route: `/v1/fw/stats/`  --- This route expires daily at 11:05", response = GetFwStats200Ok.class, responseContainer = "List", tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Per faction breakdown of faction warfare statistics", response = GetFwStats200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/stats/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<GetFwStats200Ok> getFwStats(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Ownership of faction warfare systems", nickname = "getFwSystems", notes = "An overview of the current ownership of faction warfare solar systems  --- Alternate route: `/v2/fw/systems/`  --- This route is cached for up to 1800 seconds", response = GetFwSystems200Ok.class, responseContainer = "List", tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "All faction warfare solar systems", response = GetFwSystems200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/systems/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<GetFwSystems200Ok> getFwSystems(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Data about which NPC factions are at war", nickname = "getFwWars", notes = "Data about which NPC factions are at war  --- Alternate route: `/legacy/fw/wars/`  Alternate route: `/v1/fw/wars/`  --- This route expires daily at 11:05", response = GetFwWars200Ok.class, responseContainer = "List", tags = {"Faction Warfare",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of NPC factions at war", response = GetFwWars200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/fw/wars/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<GetFwWars200Ok> getFwWars(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);

}
