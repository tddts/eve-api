/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.tddts.eve.api;

import com.github.tddts.eve.model.characters.GetCharactersCharacterIdOpportunities200Ok;
import com.github.tddts.eve.model.error.*;
import com.github.tddts.eve.model.opportunities.GetOpportunitiesGroupsGroupIdOk;
import com.github.tddts.eve.model.opportunities.GetOpportunitiesTasksTaskIdOk;
import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

@Api(value = "Opportunities")
public interface OpportunitiesApi {

  @ApiOperation(value = "Get a character's completed tasks", nickname = "getCharactersCharacterIdOpportunities", notes = "Return a list of tasks finished by a character  --- Alternate route: `/dev/characters/{character_id}/opportunities/`  Alternate route: `/legacy/characters/{character_id}/opportunities/`  Alternate route: `/v1/characters/{character_id}/opportunities/`  --- This route is cached for up to 3600 seconds", response = GetCharactersCharacterIdOpportunities200Ok.class, responseContainer = "List", authorizations = {
      @Authorization(value = "evesso", scopes = {
          @AuthorizationScope(scope = "esi-characters.read_opportunities.v1", description = "EVE SSO scope esi-characters.read_opportunities.v1")
      })
  }, tags = {"Opportunities",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of opportunities task ids", response = GetCharactersCharacterIdOpportunities200Ok.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 401, message = "Unauthorized", response = Unauthorized.class),
      @ApiResponse(code = 403, message = "Forbidden", response = Forbidden.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/characters/{character_id}/opportunities/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<GetCharactersCharacterIdOpportunities200Ok> getCharactersCharacterIdOpportunities(
      @Min(1) @ApiParam(value = "An EVE character ID", required = true) @PathVariable("character_id") Integer characterId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Access token to use if unable to set a header") @Valid @RequestParam(value = "token", required = false) String token);


  @ApiOperation(value = "Get opportunities groups", nickname = "getOpportunitiesGroups", notes = "Return a list of opportunities groups  --- Alternate route: `/dev/opportunities/groups/`  Alternate route: `/legacy/opportunities/groups/`  Alternate route: `/v1/opportunities/groups/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Opportunities",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of opportunities group ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/opportunities/groups/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<Integer> getOpportunitiesGroups(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get opportunities group", nickname = "getOpportunitiesGroupsGroupId", notes = "Return information of an opportunities group  --- Alternate route: `/dev/opportunities/groups/{group_id}/`  Alternate route: `/legacy/opportunities/groups/{group_id}/`  Alternate route: `/v1/opportunities/groups/{group_id}/`  --- This route expires daily at 11:05", response = GetOpportunitiesGroupsGroupIdOk.class, tags = {"Opportunities",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Details of an opportunities group", response = GetOpportunitiesGroupsGroupIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/opportunities/groups/{group_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetOpportunitiesGroupsGroupIdOk getOpportunitiesGroupsGroupId(
      @ApiParam(value = "ID of an opportunities group", required = true) @PathVariable("group_id") Integer groupId,
      @ApiParam(value = "Language to use in the response", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
      @ApiParam(value = "Language to use in the response, takes precedence over Accept-Language", allowableValues = "de, en-us, fr, ja, ru, zh", defaultValue = "en-us") @Valid @RequestParam(value = "language", required = false, defaultValue = "en-us") String language);


  @ApiOperation(value = "Get opportunities tasks", nickname = "getOpportunitiesTasks", notes = "Return a list of opportunities tasks  --- Alternate route: `/dev/opportunities/tasks/`  Alternate route: `/legacy/opportunities/tasks/`  Alternate route: `/v1/opportunities/tasks/`  --- This route expires daily at 11:05", response = Integer.class, responseContainer = "List", tags = {"Opportunities",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "A list of opportunities task ids", response = Integer.class, responseContainer = "List"),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/opportunities/tasks/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  List<Integer> getOpportunitiesTasks(
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);


  @ApiOperation(value = "Get opportunities task", nickname = "getOpportunitiesTasksTaskId", notes = "Return information of an opportunities task  --- Alternate route: `/dev/opportunities/tasks/{task_id}/`  Alternate route: `/legacy/opportunities/tasks/{task_id}/`  Alternate route: `/v1/opportunities/tasks/{task_id}/`  --- This route expires daily at 11:05", response = GetOpportunitiesTasksTaskIdOk.class, tags = {"Opportunities",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Details of an opportunities task", response = GetOpportunitiesTasksTaskIdOk.class),
      @ApiResponse(code = 304, message = "Not modified"),
      @ApiResponse(code = 400, message = "Bad request", response = BadRequest.class),
      @ApiResponse(code = 420, message = "Error limited", response = ErrorLimited.class),
      @ApiResponse(code = 500, message = "Internal server error", response = InternalServerError.class),
      @ApiResponse(code = 503, message = "Service unavailable", response = ServiceUnavailable.class),
      @ApiResponse(code = 504, message = "Gateway timeout", response = GatewayTimeout.class)})
  @RequestMapping(value = "/opportunities/tasks/{task_id}/",
      produces = "application/json",
      consumes = "",
      method = RequestMethod.GET)
  GetOpportunitiesTasksTaskIdOk getOpportunitiesTasksTaskId(
      @ApiParam(value = "ID of an opportunities task", required = true) @PathVariable("task_id") Integer taskId,
      @ApiParam(value = "The server name you would like data from", allowableValues = "tranquility, singularity", defaultValue = "tranquility") @Valid @RequestParam(value = "datasource", required = false, defaultValue = "tranquility") String datasource,
      @ApiParam(value = "ETag from a previous request. A 304 will be returned if this matches the current ETag") @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch);

}
